diff -aurb ../../cryptsetup/cryptsetup-v2.0.2-87dcc9fe0748b67f38b89ca520b8027d9ec72edd/lib/luks1/af.c cryptsetup-override/lib/luks1/af.c
--- ../../cryptsetup/cryptsetup-v2.0.2-87dcc9fe0748b67f38b89ca520b8027d9ec72edd/lib/luks1/af.c	2018-03-07 11:55:54.000000000 +0000
+++ cryptsetup-override/lib/luks1/af.c	2020-02-17 13:45:42.940642780 +0000
@@ -27,9 +27,14 @@
 #include <string.h>
 #include <netinet/in.h>
 #include <errno.h>
+#include <stdio.h>
+#include <sys/mman.h>
+
 #include "internal.h"
 #include "af.h"
 
+#include "lkl_host.h"
+
 static void XORblock(const char *src1, const char *src2, char *dst, size_t n)
 {
 	size_t j;
@@ -106,7 +111,7 @@
 	char *bufblock;
 	int r = -EINVAL;
 
-	if((bufblock = calloc(blocksize, 1)) == NULL) return -ENOMEM;
+	if(!(bufblock = lkl_sys_mmap(NULL, blocksize, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0))) return -ENOMEM;
 
 	/* process everything except the last block */
 	for(i=0; i<blocknumbers-1; i++) {
@@ -121,7 +126,7 @@
 	XORblock(src,bufblock,dst+(i*blocksize),blocksize);
 	r = 0;
 out:
-	free(bufblock);
+	lkl_sys_munmap((unsigned long) bufblock, blocksize);
 	return r;
 }
 
@@ -132,7 +137,7 @@
 	char *bufblock;
 	int r = -EINVAL;
 
-	if((bufblock = calloc(blocksize, 1)) == NULL)
+	if(!(bufblock = lkl_sys_mmap(NULL, blocksize, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)))
 		return -ENOMEM;
 
 	memset(bufblock,0,blocksize);
@@ -144,7 +149,7 @@
 	XORblock(src + blocksize * i, bufblock, dst, blocksize);
 	r = 0;
 out:
-	free(bufblock);
+	lkl_sys_munmap((unsigned long) bufblock, blocksize);
 	return r;
 }
 
diff -aurb ../../cryptsetup/cryptsetup-v2.0.2-87dcc9fe0748b67f38b89ca520b8027d9ec72edd/lib/luks2/luks2_disk_metadata.c cryptsetup-override/lib/luks2/luks2_disk_metadata.c
--- ../../cryptsetup/cryptsetup-v2.0.2-87dcc9fe0748b67f38b89ca520b8027d9ec72edd/lib/luks2/luks2_disk_metadata.c	2018-03-07 11:55:54.000000000 +0000
+++ cryptsetup-override/lib/luks2/luks2_disk_metadata.c	2020-02-17 13:38:16.545744894 +0000
@@ -20,8 +20,10 @@
  */
 
 #include <assert.h>
+#include <sys/mman.h>
 
 #include "luks2_internal.h"
+#include "lkl_host.h"
 
 /*
  * Helper functions
@@ -216,7 +218,7 @@
  * Read LUKS2 header from disk at specific offset.
  */
 static int hdr_read_disk(struct device *device, struct luks2_hdr_disk *hdr_disk,
-			 char **json_area, uint64_t offset, int secondary)
+			 char **json_area, size_t *json_area_len, uint64_t offset, int secondary)
 {
 	size_t hdr_json_size = 0;
 	int devfd = -1, r;
@@ -248,17 +250,19 @@
 	/*
 	 * Allocate and read JSON area. Always the whole area must be read.
 	 */
-	*json_area = malloc(hdr_json_size);
+	*json_area = lkl_sys_mmap(NULL, hdr_json_size, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
 	if (!*json_area) {
 		close(devfd);
 		return -ENOMEM;
 	}
 
+	*json_area_len = hdr_json_size;
+
 	if (read_lseek_blockwise(devfd, device_block_size(device),
 				 device_alignment(device), *json_area, hdr_json_size,
 				 offset + LUKS2_HDR_BIN_LEN) != (ssize_t)hdr_json_size) {
 		close(devfd);
-		free(*json_area);
+		lkl_sys_munmap((unsigned long) *json_area, hdr_json_size);
 		*json_area = NULL;
 		return -EIO;
 	}
@@ -398,7 +402,7 @@
 	 * Allocate and zero JSON area (of proper header size).
 	 */
 	json_area_len = hdr->hdr_size - LUKS2_HDR_BIN_LEN;
-	json_area = malloc(json_area_len);
+	json_area = lkl_sys_mmap(NULL, json_area_len, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
 	if (!json_area)
 		return -ENOMEM;
 	memset(json_area, 0, json_area_len);
@@ -409,12 +413,12 @@
 	json_text = json_object_to_json_string_ext(hdr->jobj, JSON_C_TO_STRING_PLAIN);
 	if (!json_text || !*json_text) {
 		log_dbg("Cannot parse JSON object to text representation.");
-		free(json_area);
+		lkl_sys_munmap((unsigned long) json_area, json_area_len);
 		return -ENOMEM;
 	}
 	if (strlen(json_text) > (json_area_len - 1)) {
 		log_dbg("JSON is too large (%zu > %zu).", strlen(json_text), json_area_len);
-		free(json_area);
+		lkl_sys_munmap((unsigned long) json_area, json_area_len);
 		return -EINVAL;
 	}
 	strncpy(json_area, json_text, json_area_len);
@@ -425,7 +429,7 @@
 	r = device_write_lock(cd, device);
 	if (r) {
 		log_err(cd, _("Failed to acquire write device lock.\n"));
-		free(json_area);
+		lkl_sys_munmap((unsigned long) json_area, json_area_len);
 		return r;
 	}
 
@@ -441,7 +445,7 @@
 
 	/* FIXME: try recovery here? */
 
-	free(json_area);
+	lkl_sys_munmap((unsigned long) json_area, json_area_len);
 	return r;
 }
 
@@ -529,6 +533,7 @@
 	enum { HDR_OK, HDR_OBSOLETE, HDR_FAIL, HDR_FAIL_IO } state_hdr1, state_hdr2;
 	struct luks2_hdr_disk hdr_disk1, hdr_disk2;
 	char *json_area1 = NULL, *json_area2 = NULL;
+	size_t json_area1_len = 0, json_area2_len = 0;
 	json_object *jobj_hdr1 = NULL, *jobj_hdr2 = NULL;
 	int i, r;
 	uint64_t hdr_size;
@@ -542,7 +547,7 @@
 	 * Read primary LUKS2 header (offset 0).
 	 */
 	state_hdr1 = HDR_FAIL;
-	r = hdr_read_disk(device, &hdr_disk1, &json_area1, 0, 0);
+	r = hdr_read_disk(device, &hdr_disk1, &json_area1, &json_area1_len, 0, 0);
 	if (r == 0) {
 		jobj_hdr1 = parse_and_validate_json(json_area1, be64_to_cpu(hdr_disk1.hdr_size) - LUKS2_HDR_BIN_LEN);
 		state_hdr1 = jobj_hdr1 ? HDR_OK : HDR_OBSOLETE;
@@ -554,7 +559,7 @@
 	 */
 	state_hdr2 = HDR_FAIL;
 	if (state_hdr1 != HDR_FAIL && state_hdr1 != HDR_FAIL_IO) {
-		r = hdr_read_disk(device, &hdr_disk2, &json_area2, be64_to_cpu(hdr_disk1.hdr_size), 1);
+		r = hdr_read_disk(device, &hdr_disk2, &json_area2, &json_area2_len, be64_to_cpu(hdr_disk1.hdr_size), 1);
 		if (r == 0) {
 			jobj_hdr2 = parse_and_validate_json(json_area2, be64_to_cpu(hdr_disk2.hdr_size) - LUKS2_HDR_BIN_LEN);
 			state_hdr2 = jobj_hdr2 ? HDR_OK : HDR_OBSOLETE;
@@ -565,7 +570,7 @@
 		 * No header size, check all known offsets.
 		 */
 		for (r = -EINVAL,i = 2; r < 0 && i <= 1024; i <<= 1)
-			r = hdr_read_disk(device, &hdr_disk2, &json_area2, i * 4096, 1);
+			r = hdr_read_disk(device, &hdr_disk2, &json_area2, &json_area2_len, i * 4096, 1);
 
 		if (r == 0) {
 			jobj_hdr2 = parse_and_validate_json(json_area2, be64_to_cpu(hdr_disk2.hdr_size) - LUKS2_HDR_BIN_LEN);
@@ -633,9 +638,9 @@
 		}
 	}
 
-	free(json_area1);
+	lkl_sys_munmap((unsigned long) json_area1, json_area1_len);
 	json_area1 = NULL;
-	free(json_area2);
+	lkl_sys_munmap((unsigned long) json_area2, json_area2_len);
 	json_area2 = NULL;
 
 	/* wrong lock for write mode during recovery attempt */
diff -aurb ../../cryptsetup/cryptsetup-v2.0.2-87dcc9fe0748b67f38b89ca520b8027d9ec72edd/lib/utils_crypt.c cryptsetup-override/lib/utils_crypt.c
--- ../../cryptsetup/cryptsetup-v2.0.2-87dcc9fe0748b67f38b89ca520b8027d9ec72edd/lib/utils_crypt.c	2018-03-07 11:55:54.000000000 +0000
+++ cryptsetup-override/lib/utils_crypt.c	2020-02-17 13:36:41.921979613 +0000
@@ -20,6 +20,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
+#include <sys/mman.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -27,6 +28,7 @@
 
 #include "libcryptsetup.h"
 #include "utils_crypt.h"
+#include "lkl_host.h"
 
 int crypt_parse_name_and_mode(const char *s, char *cipher, int *key_nums,
 			      char *cipher_mode)
@@ -166,7 +168,12 @@
 	if (!size || size > (SIZE_MAX - offsetof(struct safe_allocation, data)))
 		return NULL;
 
-	alloc = malloc(size + offsetof(struct safe_allocation, data));
+	/* round size to page */
+	size = ((size + offsetof(struct safe_allocation, data)) + 4096-1) & (~(4096-1));
+	if (!size || size > (SIZE_MAX - offsetof(struct safe_allocation, data)))
+		return NULL;
+
+	alloc = lkl_sys_mmap(NULL, size, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
 	if (!alloc)
 		return NULL;
 
@@ -186,11 +193,12 @@
 
 	alloc = (struct safe_allocation *)
 		((char *)data - offsetof(struct safe_allocation, data));
+	size_t size = alloc->size;
 
 	crypt_memzero(data, alloc->size);
 
 	alloc->size = 0x55aa55aa;
-	free(alloc);
+	lkl_sys_munmap((unsigned long) alloc, size);
 }
 
 void *crypt_safe_realloc(void *data, size_t size)
