trigger:
  - 'master'

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

# A variable group must be defined in Library section with name "SGX-Vars"
variables:
  - group: SGX-Vars
  - name: SGXLKL_ROOT
    value: $(Build.SourcesDirectory)
  - name: SGXLKL_PREFIX
    value: $(Build.SourcesDirectory)/build/install

jobs:  
- job: Build
  displayName: Build

  pool:
    name: "sgx-vms-2"

  steps:
    - checkout: self
      submodules: false
      clean: true

    - task: InstallSSHKey@0
      displayName: "Install an SSH key"
      inputs:
        knownHostsEntry: "*"
        # Public key of 'github_ssh_private_key' (mentioned below) must be declared as variable name in 'SGX-Vars' variable group.
        # Variable Name - GitHubPublicKey
        # Variable Value - <your public key data in string format>
        sshPublicKey: "$(GitHubPublicKey)"
        # A github private key must be uploaded to "Secure files" Section in Azure Pipelines.
        # This key must have read access to private repositories.
        # Once uploaded to secure files, you can rename it to below name.
        sshKeySecureFile: "github_ssh_private_key"

    - bash: .azure-pipelines/scripts/checkout_submodules.sh
      displayName: Checkout Submodules

    - bash: .azure-pipelines/scripts/install_openenclave.sh
      displayName: Install Open Enclave

    - bash: .azure-pipelines/scripts/cleanup_docker_images.sh
      displayName: Cleanup untagged Docker images

    - bash: .azure-pipelines/scripts/build_docker.sh
      displayName: Compile and Build via Docker (debug)
      env:
        is_debug: 'true'
        #build_type: debug
    
    #- bash: .azure-pipelines/scripts/build_docker.sh
    #  displayName: Compile and Build via Docker (optimized)
    #  env:
    #    build_type: optimized
    #
    #- bash: .azure-pipelines/scripts/build_docker.sh
    #  displayName: Compile and Build via Docker (release)
    #  env:
    #    build_type: release

    # For dev releases only:
    # Create enclave image with bigger heap size.
    # This is temporary only until EEID support allows dynamic heap sizes.
    - bash: |
        set -ex
        cp build/libsgxlkl.so build/libsgxlkl_big_heap.so
        # 4GB (= 1048576 * 4KB)
        sed -i "/NumHeapPages=/c\NumHeapPages=1048576" config/params.conf
        /opt/openenclave/bin/oesign sign -e build/libsgxlkl_big_heap.so -c config/params.conf -k build/private.pem
        cp build/libsgxlkl_big_heap.so.signed $(SGXLKL_PREFIX)/lib
      condition: and(succeeded(), ne(variables['PUBLISH_RELEASE'], '1'))
      displayName: Create enclave binary variant with big heap size

    - bash: .azure-pipelines/scripts/create_standalone_deb_pkg.sh
      displayName: Create SGX-LKL stand-alone Debian package
    
    - bash: .azure-pipelines/scripts/test_standalone_deb_pkg.sh
      displayName: Run tests on SGX-LKL stand-alone Debian package

    - bash: .azure-pipelines/scripts/create_fsgsbase_dkms_deb_pkg.sh
      displayName: Create FSGSBASE Debian package
    
    - bash: .azure-pipelines/scripts/create_deb_apt_repository.sh
      displayName: Create APT repository

    - task: PublishBuildArtifacts@1
      displayName: Publish APT repository as build artifact
      condition: always()
      inputs:
        pathtoPublish: build/deb-apt-repo
        artifactName: deb

    - task: PublishBuildArtifacts@1
      displayName: Archive Logs
      condition: always()
      inputs:
        pathtoPublish: report
        artifactName: logs

# If you want to publish the .deb packages to the release package feed and APT repository,
# then start the build with variable:
# Name = PUBLISH_RELEASE
# Value = 1
- job: Publish
  displayName: Publish

  dependsOn: Build

  # Don't publish for PR builds.
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  # Note: We use a hosted agent for the publish job mostly because it has
  # the Azure CLI package installed (see below).
  pool:
    vmImage: ubuntu-latest

  steps:
    - checkout: self
      submodules: false

    - script: bash .azure-pipelines/scripts/set_version.sh
      displayName: Set version variable

    - script: |
        BLOB_CONTAINER=apt
        PKG_FEED=deb-pkg
        if [[ ${PUBLISH_RELEASE} != 1 ]]; then
          BLOB_CONTAINER=${BLOB_CONTAINER}-dev
          PKG_FEED=${PKG_FEED}-dev
        fi
        echo "BLOB_CONTAINER=$(BLOB_CONTAINER)"
        echo "PKG_FEED=$(PKG_FEED)"
        echo "##vso[task.setvariable variable=BLOB_CONTAINER]${BLOB_CONTAINER}"
        echo "##vso[task.setvariable variable=PKG_FEED]${PKG_FEED}"
      displayName: Set storage locations
    
    - task: DownloadBuildArtifacts@0
      displayName: Download APT repository build artifact
      inputs:
        artifactName: deb

    - task: UniversalPackages@0
      displayName: Publish APT repository to package feed
      inputs:
        command: publish
        publishDirectory: $(System.ArtifactsDirectory)/deb
        vstsFeedPublish: ConfidentialLinuxContainers/$(PKG_FEED)
        vstsFeedPackagePublish: clc
        versionOption: custom
        versionPublish: $(SGXLKL_VERSION)
      
    - task: AzureCLI@2
      displayName: Publish APT repository to Blob container
      inputs:
        # pkg-storage is the name of the service connection created in Azure DevOps
        # that gives access to the resource group containing the storage account.
        azureSubscription: pkg-storage
        scriptType: bash
        scriptLocation: inlineScript
        # APT does not support repository URLs with query parameters.
        # Because of that we cannot use SAS URLs and have to "protect" the repository
        # by using a known random prefix.
        inlineScript: |
          az storage blob upload-batch \
            --account-name clcpackages -d $(BLOB_CONTAINER) \
            --destination-path 1fa5fb889b8efa6ea07354c3b54903f7 \
            -s $(System.ArtifactsDirectory)/deb
        